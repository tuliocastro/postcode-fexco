{"version":3,"sources":["main.js","constants/constants.js","constants/lookups.js","controllers/configuration.ctrl.js","controllers/postcoder.api.ctrl.js","interceptor/http.exception.interceptor.js","factories/api.factory.js","factories/lookup.executor.service.js","routes/configuration.routes.js","routes/postcoder.routes.js","services/ie.service.js","services/uk.service.js","util/array.util.js","session/apiKey.session.js"],"names":["window","CONSTANTS","APP","EMPTY_TEMPLATE","angular","module","config","$urlRouterProvider","$httpProvider","growlProvider","otherwise","interceptors","push","globalTimeToLive","run","$rootScope","$state","GlobalConstants","$transitions","APIKeySession","constants","onBefore","to","trans","get","target","constant","API_BASE_ENDPOINT","REQUEST_CONTENT_TYPE","APP_NAME","list","name","Controller","save","store","ctrl","apiKey","go","INITIAL_ROUTE","reset","this","controller","$window","_lookups","filter","findAddresses","params","page","nextPage","previousPage","scrollTo","addresses","selectedLookup","execute","then","res","console","log","data","setPagination","err","pagination","lastResult","last","morevalues","nextpage","totalresults","lookups","lines","distance","format","Factory","$q","$injector","responseError","response","status","message","error","reject","factory","$http","$httpParamSerializerJQLike","buildURL","url","DEFAULT_OPTS","loading","engine","opts","promise","method","headers","transformRequest","upload","_opts","extend","Content-Type","undefined","post","put","delete","IEService","UKService","instances","fields","label","value","required","grid","query","findAddress","findAddressGeo","findPosition","latitude","longitude","findReverseGeo","Routes","$stateProvider","state","templateUrl","template","abstract","resolve","LookupServiceExecutor","Service","API","service","Array","prototype","length","remove","o","index","indexOf","splice","localStorageService","btoed","btoa","set","atob","clear"],"mappings":"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","file":"postcoder.assets.min.js","sourcesContent":[";\r\n(function () {\r\n\r\n    const CONFIGURATION_ROUTE = \"configuration\";\r\n\r\n    window.CONSTANTS = {\r\n        APP: 'app',\r\n        EMPTY_TEMPLATE: '<ui-view />'\r\n    };\r\n\r\n    angular.module(CONSTANTS.APP, [\r\n        'ui.router',\r\n        'LocalStorageModule',\r\n        'sticky',\r\n        'angular-growl'\r\n    ]);\r\n\r\n    angular.module(CONSTANTS.APP).config(function ($urlRouterProvider, $httpProvider, growlProvider) {\r\n\r\n        //Default Route\r\n        $urlRouterProvider.otherwise(CONFIGURATION_ROUTE);\r\n\r\n        //Http Interceptors\r\n        $httpProvider.interceptors.push('HttpExceptionInterceptor');\r\n\r\n        //Growl\r\n        growlProvider.globalTimeToLive(5000);\r\n\r\n    });\r\n\r\n    angular.module(CONSTANTS.APP).run(function ($rootScope, $state, GlobalConstants, $transitions, APIKeySession) {\r\n\r\n        $rootScope.constants = GlobalConstants;\r\n\r\n        $transitions.onBefore({to: 'postcoder.**'}, function (trans) {\r\n\r\n            if (!APIKeySession.get()) {\r\n                return $state.target(CONFIGURATION_ROUTE);\r\n            }\r\n\r\n        });\r\n\r\n    });\r\n\r\n})();",";\r\n(function () {\r\n\r\n    angular.module(CONSTANTS.APP).constant('GlobalConstants', {\r\n        API_BASE_ENDPOINT: 'http://localhost:8080',\r\n        REQUEST_CONTENT_TYPE: 'application/x-www-form-urlencoded;charset=utf-8',\r\n        EMPTY_TEMPLATE: '<div ui-view />',\r\n        APP_NAME: \"Postcoder - front consumer\"\r\n\r\n    });\r\n\r\n})();",";\r\n(function () {\r\n\r\n    angular.module(CONSTANTS.APP).constant('ServicesLookups', {\r\n        list: [\r\n            {name: \" \"},\r\n            {name: \" Irish Address and Coordinate\"},\r\n            {name: \" Irish Coordinate\"},\r\n            {name: \" Irish Reverse geocode coordinates\"},\r\n            {name: \" UK Address\"}\r\n        ]\r\n    });\r\n\r\n})();","(function () {\r\n\r\n    angular.module(CONSTANTS.APP).controller('ConfigurationCtrl', Controller);\r\n\r\n    function Controller($state, APIKeySession) {\r\n\r\n        const INITIAL_ROUTE = \"postcoder.api\";\r\n\r\n        var ctrl = this;\r\n\r\n        ctrl.apiKey = APIKeySession.get() || '';\r\n\r\n        ctrl.save = save;\r\n        ctrl.reset = reset;\r\n\r\n        /**\r\n         * Functions\r\n         */\r\n        function save() {\r\n\r\n            APIKeySession.store(ctrl.apiKey);\r\n\r\n            $state.go(INITIAL_ROUTE);\r\n\r\n        }\r\n\r\n        function reset() {\r\n\r\n            delete ctrl.apiKey;\r\n        }\r\n\r\n    }\r\n\r\n})();","(function () {\r\n\r\n    angular.module(CONSTANTS.APP).controller('PostcoderAPICtrl', Controller);\r\n\r\n    function Controller($window, _lookups) {\r\n\r\n        var ctrl = this;\r\n\r\n        ctrl.lookups = _lookups;\r\n        ctrl.selectedLookup = null;\r\n        ctrl.params = {\r\n            page: 0,\r\n            lines: null,\r\n            distance: null,\r\n            format: 'json'\r\n        };\r\n        ctrl.addresses = null;\r\n        ctrl.pagination = null;\r\n\r\n        ctrl.filter = filter;\r\n        ctrl.nextPage = nextPage;\r\n        ctrl.previousPage = previousPage;\r\n        ctrl.reset = reset;\r\n\r\n        function filter() {\r\n\r\n            reset();\r\n\r\n            findAddresses();\r\n\r\n        }\r\n\r\n        function reset() {\r\n\r\n            ctrl.params.page = 0;\r\n\r\n        }\r\n\r\n        function nextPage() {\r\n\r\n            ctrl.params.page += 1;\r\n\r\n            findAddresses();\r\n\r\n        }\r\n\r\n        function previousPage() {\r\n\r\n            ctrl.params.page -= 1;\r\n\r\n            findAddresses();\r\n\r\n        }\r\n\r\n        function findAddresses() {\r\n\r\n            $window.scrollTo(0, 0);\r\n\r\n            delete ctrl.addresses;\r\n\r\n            ctrl.selectedLookup.execute(ctrl.params).then(function (res) {\r\n\r\n                console.log(res);\r\n                ctrl.addresses = res.data;\r\n\r\n                setPagination();\r\n\r\n            }, function (err) {\r\n\r\n            });\r\n        }\r\n\r\n        function setPagination() {\r\n\r\n            delete ctrl.pagination;\r\n\r\n            var lastResult = ctrl.addresses.last() || {};\r\n\r\n            if (!lastResult || !lastResult.morevalues) {\r\n                return;\r\n            }\r\n\r\n            ctrl.pagination = {\r\n                morevalues: lastResult.morevalues,\r\n                nextpage: lastResult.nextPage,\r\n                totalresults: lastResult.totalresults\r\n            };\r\n\r\n            //Remove Pagination attributes from row result\r\n            delete lastResult.morevalues;\r\n            delete lastResult.nextpage;\r\n            delete  lastResult.totalresults;\r\n\r\n        }\r\n\r\n    }\r\n\r\n})();",";\r\n(function () {\r\n\r\n    angular.module(CONSTANTS.APP).factory('HttpExceptionInterceptor', Factory);\r\n\r\n    function Factory($q, $injector) {\r\n\r\n        return {\r\n\r\n            responseError: function (response) {\r\n\r\n                var data = response.data;\r\n\r\n                if (response.status !== 200 && data && data.message) {\r\n                    console.log('show growl');\r\n                    $injector.get('growl').error(data.message);\r\n                }\r\n\r\n                return $q.reject(response);\r\n\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n\r\n})();",";\r\n(function () {\r\n\r\n    angular.module(CONSTANTS.APP).factory('API', Factory);\r\n\r\n    function Factory(GlobalConstants, $http, $httpParamSerializerJQLike) {\r\n\r\n        var DEFAULT_OPTS = {loading: true};\r\n\r\n        function buildURL(url) {\r\n            return GlobalConstants.API_BASE_ENDPOINT + '/' + url;\r\n        }\r\n\r\n        return {\r\n\r\n            engine: function (opts) {\r\n\r\n                var promise = $http({\r\n                    data: opts.data,\r\n                    method: opts.method,\r\n                    headers: opts.headers,\r\n                    url: buildURL(opts.url),\r\n                    params: opts.params,\r\n                    transformRequest: opts.transformRequest\r\n                });\r\n\r\n                if (opts.loading) {\r\n                    // TODO promise.finally(loading.stop);\r\n                }\r\n\r\n                return promise;\r\n\r\n            },\r\n\r\n            upload: function (opts) {\r\n\r\n                var _opts = angular.extend({\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': undefined\r\n                    },\r\n                    transformRequest: null\r\n                }, DEFAULT_OPTS, opts);\r\n\r\n                return this.engine(_opts);\r\n\r\n            },\r\n\r\n            get: function (opts) {\r\n\r\n                var _opts = angular.extend({\r\n                    method: 'GET',\r\n                    transformRequest: null\r\n                }, DEFAULT_OPTS, opts);\r\n\r\n                return this.engine(_opts);\r\n\r\n            },\r\n\r\n            post: function (opts) {\r\n\r\n                var _opts = angular.extend({\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\r\n                    },\r\n                    transformRequest: $httpParamSerializerJQLike\r\n                }, DEFAULT_OPTS, opts);\r\n\r\n                return this.engine(_opts);\r\n\r\n            },\r\n\r\n            put: function (opts) {\r\n\r\n                var _opts = angular.extend({\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\r\n                    },\r\n                    transformRequest: $httpParamSerializerJQLike\r\n                }, DEFAULT_OPTS, opts);\r\n\r\n                return this.engine(_opts);\r\n\r\n            },\r\n\r\n            delete: function (opts) {\r\n\r\n                var _opts = angular.extend({\r\n                    method: 'DELETE',\r\n                    headers: {\r\n                        'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\r\n                    },\r\n                    transformRequest: $httpParamSerializerJQLike\r\n                }, DEFAULT_OPTS, opts);\r\n\r\n                return this.engine(_opts);\r\n\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n\r\n})();",";\r\n(function () {\r\n\r\n    angular.module(CONSTANTS.APP).factory('LookupServiceExecutor', Factory);\r\n\r\n    function Factory(IEService, UKService) {\r\n\r\n        var instances = [\r\n            {\r\n                name: 'Irish Address',\r\n                fields: [\r\n                    {label: \"Eircode / Address Fragment\", value: '', required: true, grid: 'col-xs-12'}\r\n                ],\r\n                execute: function (params) {\r\n\r\n                    var query = this.fields[0].value;\r\n\r\n                    return IEService.findAddress(query, params);\r\n                }\r\n            },\r\n\r\n            {\r\n                name: 'Irish Address and Coordinate',\r\n                fields: [\r\n                    {label: \"Eircode / Address Fragment\", value: '', required: true, grid: 'col-xs-12'}\r\n                ],\r\n                execute: function (params) {\r\n\r\n                    var query = this.fields[0].value;\r\n\r\n                    return IEService.findAddressGeo(query, params);\r\n                }\r\n            },\r\n\r\n            {\r\n                name: 'Irish Coordinate',\r\n                fields: [\r\n                    {label: \"Eircode\", value: '', required: true, grid: 'col-xs-12'}\r\n                ],\r\n                execute: function (params) {\r\n\r\n                    var query = this.fields[0].value;\r\n\r\n                    return IEService.findPosition(query, params);\r\n                }\r\n            },\r\n\r\n            {\r\n                name: 'Irish Reverse geocode coordinates',\r\n                fields: [\r\n                    {label: \"Latitude\", value: '', required: true, grid: 'col-xs-6'},\r\n                    {label: \"Longitude\", value: '', required: false, grid: 'col-xs-6'}\r\n                ],\r\n                execute: function (params) {\r\n\r\n                    var latitude = this.fields[0].value;\r\n                    var longitude = this.fields[1].value;\r\n\r\n                    return IEService.findReverseGeo(latitude, longitude, params);\r\n                }\r\n            },\r\n\r\n\r\n            {\r\n                name: 'UK Address',\r\n                fields: [\r\n                    {label: \"Postcode / Address Fragment\", value: '', required: true, grid: 'col-xs-12'}\r\n                ],\r\n                execute: function (params) {\r\n\r\n                    var query = this.fields[0].value;\r\n\r\n                    return UKService.findAddress(query, params);\r\n                }\r\n\r\n            },\r\n\r\n        ];\r\n\r\n        return {\r\n\r\n            list: function () {\r\n                return instances;\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n})();",";\r\n(function () {\r\n\r\n    angular.module(CONSTANTS.APP).config(Routes);\r\n\r\n    function Routes($stateProvider) {\r\n\r\n        $stateProvider\r\n\r\n            .state({\r\n                name: 'configuration',\r\n                url: '/configuration',\r\n                templateUrl: \"configuration.html\",\r\n                controller: \"ConfigurationCtrl as ctrl\"\r\n            });\r\n\r\n    }\r\n\r\n})();",";\r\n(function () {\r\n\r\n    angular.module(CONSTANTS.APP).config(Routes);\r\n\r\n    function Routes($stateProvider) {\r\n\r\n        $stateProvider\r\n\r\n            .state({\r\n                name: 'postcoder',\r\n                url: '/postcoder',\r\n                template: CONSTANTS.EMPTY_TEMPLATE,\r\n                abstract: true\r\n            })\r\n\r\n            .state({\r\n                name: 'postcoder.api',\r\n                url: '/api',\r\n                templateUrl: \"postcoder/api.html\",\r\n                controller: \"PostcoderAPICtrl as ctrl\",\r\n                resolve: {\r\n                    _lookups: function (LookupServiceExecutor) {\r\n\r\n                        return LookupServiceExecutor.list();\r\n                    }\r\n\r\n                }\r\n            });\r\n\r\n    }\r\n\r\n})();",";\r\n(function () {\r\n\r\n    angular.module(CONSTANTS.APP).service('IEService', Service);\r\n\r\n    function Service(API, APIKeySession) {\r\n\r\n        return {\r\n\r\n            findAddress: function (query, params) {\r\n                return API.get({\r\n                    params: params,\r\n                    url: APIKeySession.get() + '/address/ie/' + query\r\n                });\r\n            },\r\n\r\n            findAddressGeo: function (query, params) {\r\n                return API.get({\r\n                    params: params,\r\n                    url: APIKeySession.get() + '/addressgeo/ie/' + query\r\n                });\r\n            },\r\n\r\n            findPosition: function (query, params) {\r\n                return API.get({\r\n                    params: params,\r\n                    url: APIKeySession.get() + '/position/ie/' + query\r\n                });\r\n            },\r\n\r\n            findReverseGeo: function (latitude, longitude, params) {\r\n                console.log('finding reverse geo');\r\n                return API.get({\r\n                    params: params,\r\n                    url: APIKeySession.get() + '/rgeo/ie/' + latitude + '/' + longitude\r\n                });\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n})();\r\n",";\r\n(function () {\r\n\r\n    angular.module(CONSTANTS.APP).service('UKService', Service);\r\n\r\n    function Service(API, APIKeySession) {\r\n\r\n        return {\r\n\r\n            findAddress: function (query, params) {\r\n                return API.get({\r\n                    params: params,\r\n                    url: APIKeySession.get() + '/address/uk/' + query\r\n                });\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n})();\r\n","/**\r\n * Fastest way to get the last element from array\r\n */\r\nif (!Array.prototype.last) {\r\n    Array.prototype.last = function () {\r\n        return this[this.length - 1];\r\n    };\r\n}\r\n\r\n/**\r\n * Remove an object from array using splice method\r\n */\r\nif (!Array.prototype.remove) {\r\n    Array.prototype.remove = function (o) {\r\n        var index = this.indexOf(o);\r\n        if (index >= 0) {\r\n            this.splice(index, 1);\r\n        }\r\n    };\r\n}","(function () {\r\n\r\n    angular.module(CONSTANTS.APP).factory('APIKeySession', Factory);\r\n\r\n    function Factory(localStorageService) {\r\n\r\n        var KEY_PCW_KEY = '___POSTPCWKEY';\r\n\r\n        return {\r\n\r\n            store: function (data) {\r\n\r\n                var btoed = btoa(data);\r\n\r\n                localStorageService.set(KEY_PCW_KEY, btoed);\r\n            },\r\n\r\n            get: function () {\r\n\r\n                var btoed = localStorageService.get(KEY_PCW_KEY);\r\n\r\n                if (!btoed){\r\n                    return null;\r\n                }\r\n\r\n                return atob(btoed);\r\n            },\r\n\r\n            clear: function () {\r\n                localStorageService.remove(KEY_PCW_KEY);\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n\r\n})();"]}